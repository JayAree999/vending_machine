name: Python tests

on: [ push ]

env:
  PYTHON_VERSION: "3.9"
  POETRY_VERSION: "1.3.2"

jobs:

  lint:
    runs-on: ubuntu-20.04



    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Lint with isort
        uses: isort/isort-action@master
        with:
          isortVersion: "5.12.0"

      - name: Lint with black
        uses: psf/black@stable
        with:
          version: "22.3.0"
  build-mysql:
    runs-on: ubuntu-20.04 # is Ubuntu environment



    steps:

      - name: Shutdown Ubuntu MySQL (SUDO)
        run: sudo service mysql stop # Shutdown the Default MySQL, "sudo" is necessary, please not remove it

      - # ... some steps before set-up MySQL ...
      - name: Set up MySQL
        uses: mirromutth/mysql-action@v1.1
        with:

          container port: 3306 # Optional, default value is 3306. The port of container
          character set server: 'utf8' # Optional, default value is 'utf8mb4'. The '--character-set-server' option for mysqld
          collation server: 'utf8_general_ci' # Optional, default value is 'utf8mb4_general_ci'. The '--collation-server' option for mysqld
          mysql version: '8.0' # Optional, default value is "latest". The version of the MySQL
          mysql database: 'some_test' # Optional, default value is "test". The specified database which will be create
          mysql root password:  'mypassword'# Required if "mysql user" is empty, default is empty. The root superuser password
          mysql user: 'developer' # Required if "mysql root password" is empty, default is empty. The superuser for the specified database. Can use secrets, too
          mysql password: 'mypassword' # Required if "mysql user" exists. The password for the "mysql user"

      # ... some another config ...
  test-and-coverage:
    runs-on: ubuntu-20.04
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: your-db_dev
        ports:
          - 3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: |
          curl -sL https://install.python-poetry.org | POETRY_VERSION=${{ env.POETRY_VERSION }} python - -y
      - name: Configure Poetry
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.in-project true
      - name: Set up Poetry cache
        id: poetry-cache
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: poetry install

      - name: Test with Pytest
        run: |
          poetry run pytest
      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: coverage.xml
          retention-days: 7



  build-and-upload:
    needs: [ test-and-coverage ]
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Poetry
        run: |
          curl -sL https://install.python-poetry.org | POETRY_VERSION=${{ env.POETRY_VERSION }} python - -y
      - name: Configure Poetry
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.in-project true
      - name: Set up Poetry cache
        id: poetry-cache
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: poetry install

      - name: Build
        run: |
          poetry build
      - name: Upload tarball and wheel
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist
          if-no-files-found: error

  sonarqube:
    # runs after test-and-coverage job
    needs: test-and-coverage
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: Download coverage report artifact
        uses: actions/download-artifact@v2
        with:
          name: coverage-report

      - name: SonarQube Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
